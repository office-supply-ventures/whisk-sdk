"[[\"buildSearchIndex\",true],[\"index.35e5f9a217d2d78f9abbaabf4a5a58dbf7cb432505fa22868bbf981b1a4fdff0\",{\"mdx\":\"import GenerateKey from \\\"../components/GenerateKey\\\";\\n\\n# GraphQL [Directly query the Whisk server]\\n\\nAll data in Whisk is served via a GraphQL API. Whisk SDK's components and hooks abstract this away (but use it under the hood). \\nIf you need direct data access or want to use Whisk outside of React, you can use the GraphQL API directly. \\n\\nAPI: `https://api.whisk.so/graphql`\\n\\n## Playground\\n\\nThe [Whisk GraphQL playground](https://api.whisk.so/graphql) is a great way to explore the API and test queries. To use the playground:\\n\\n::::steps\\n### Generate API key if you haven't already\\n\\nThe API key will be sent to your email address. This is the same key you use for the SDK.\\n\\n<GenerateKey />\\n\\n### Add authorization header\\n\\nIn the `Headers` section of the playground, add the following:\\n\\n```json [Headers]\\n{\\n  \\\"Authorization\\\": \\\"Bearer <YOUR_API_KEY>\\\"\\n}\\n```\\n\\n### Query the API\\n\\nTry running a query like this:\\n\\n```graphql [Example Query]\\n{\\n  identity(address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\") {\\n    aggregate {\\n      name\\n      avatar\\n      bio\\n    }\\n  }\\n}\\n```\\n\\n::::\\n\\nExample of what your playground should look like:\\n![GraphQL Example](/graphql-example.png)\\n\",\"document\":[]}],[\"index.d74a281190ea309a42d6526870e9415dcff84e720a96feae8da1a000750a3bc1\",{\"mdx\":\"import GenerateKey from \\\"../components/GenerateKey\\\";\\n\\n# Get started [Get started with Whisk SDK in just a few lines of code.]\\n\\n## Overview\\n\\nWhisk SDK provides a suite of modular kits for seamless integration with the [Whisk.so](https://whisk.so) blockchain data pipeline. \\nEach kit includes:\\n- Customizable React components for rapid development.\\n- React Hooks programmatic access to Whisk data.\\n- Direct graphQL access for low level control and use outside of React.\\n\\n![Whisk Diagram](/how-it-works.png)\\n\\n## Installation\\n\\n:::code-group\\n\\n```bash [npm]\\nnpm i @paperclip-labs/whisk-sdk\\n```\\n\\n```bash [pnpm]\\npnpm i @paperclip-labs/whisk-sdk\\n```\\n\\n```bash [yarn]\\nyarn add @paperclip-labs/whisk-sdk\\n```\\n\\n:::\\n\\n## Configuration\\n\\n::::steps\\n### Import styles at the top of your layout or app\\n\\n```ts [layout.tsx]\\nimport \\\"@paperclip-labs/whisk-sdk/styles.css\\\"\\n// Other style imports below\\n```\\n\\n### Generate API key\\n\\nThe API key will be sent to your email address.\\n\\n<GenerateKey />\\n \\n### Wrap App in `WhiskSdkProvider`\\n\\n:::code-group \\n```tsx [providers.tsx] twoslash  filename=\\\"providers.tsx\\\"\\n\\\"use client\\\";\\nimport { WhiskSdkProvider } from \\\"@paperclip-labs/whisk-sdk\\\"; // [!code focus]\\n\\nexport default function Providers({ children }: { children: React.ReactNode }) {\\n  return (\\n    <WhiskSdkProvider // [!code focus]\\n        apiKey=\\\"<YOUR_API_KEY>\\\" // Check your email from prev step. // [!code focus]\\n        config={{ // [!code focus]\\n            // Define configuration for each kit you plan to use.  // [!code focus]\\n            // See respective Kit docs for full config. // [!code focus]\\n        }} // [!code focus]\\n    >\\n        {children}\\n    </WhiskSdkProvider> // [!code focus]\\n  ); \\n}\\n```\\n\\n```tsx [layout.tsx] \\nimport \\\"@paperclip-labs/whisk-sdk/styles.css\\\"\\nimport { Providers } from \\\"./providers\\\"; // [!code focus]\\n\\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\\n  return (\\n    <Providers> // [!code focus]\\n        {children}\\n    </Providers> // [!code focus]\\n  );\\n}\\n```\\n:::\\n \\n### Use the SDK \\n \\nTo use a specific kit, simply import and utilize its components. Whisk SDK is optimized for tree-shaking, so only the imports you use will be included in your bundle.\\n\\nFor example, the Identity Kit:\\n```tsx \\nimport { Name, Avatar } from \\\"@paperclip-labs/whisk-sdk/identity\\\"; // [!code focus]\\n\\nfunction ExampleComponent() {\\n    // This could come from a connected wallet via Wagmi, ethers.js, web3.js, Privy, etc.\\n    const address = \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\";\\n\\n    return (\\n        <div className=\\\"flex items-center gap-2\\\">\\n            <Avatar address={address} size={30} /> // [!code focus]\\n            <Name address={address} /> // [!code focus]\\n        </div>\\n    );\\n}\\n```\\n::::\\n\\n## GraphQL\\n\\nWhisk data is all server via a GraphQL API. The SDK helps abstract this, but if you need direct data access checkout the [GraphQL docs](/graphql).\\n\\n## Customization\\n\\nYou can customize all components via configuring the Whisk SDK Theme with CSS variables, or with [tailwindCSS](https://tailwindcss.com/) using the className prop. \\n\\nMore docs on this coming soon.\\n\",\"document\":[]}],[\"index.db2725c6ca72c0bb2f55032bc507a929f3118ef51bac29244cdb7172da2c5381\",{\"mdx\":\"import { Name, Avatar, IdentityResolver } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\nimport { Button } from 'vocs/components'\\n\\n# Identity Kit [Seamlessly integrate web3 avatars, usernames and profiles into your app.]\\n\\n:::code-group \\n\\n<div data-title=\\\"preview\\\">\\n    <div className=\\\"flex gap-2 max-w-full flex-wrap\\\">\\n        {[\\n            { address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\", resolverOrder: [IdentityResolver.Ens]},\\n            { address: \\\"0x9C87A1065994f156f0B7b87AAa8B3c5F7BD67E02\\\", resolverOrder: [IdentityResolver.Nns, IdentityResolver.Ens]},\\n            { address: \\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\", resolverOrder: [IdentityResolver.Farcaster]},\\n            { address: \\\"0x849151d7D0bF1F34b70d5caD5149D28CC2308bf1\\\", resolverOrder: [IdentityResolver.Base]},\\n            { address: \\\"0xF9E1845cf5E982F4E13F23d75d41Bf795d35Bcf1\\\", resolverOrder: [IdentityResolver.Uni]},\\n            { address: \\\"0x7241DDDec3A6aF367882eAF9651b87E1C7549Dff\\\", resolverOrder: [IdentityResolver.Lens]},\\n            { address: \\\"0x97edb150bb8ca57f22090409e3a20c24afaaa7b0\\\", resolverOrder: [IdentityResolver.World]},\\n        ].map(({address, resolverOrder}, i) => \\n            <button key={i} className=\\\"flex gap-2 items-center p-2 border-2 w-fit rounded-lg border-white/10 hover:bg-white/10 transition-colors\\\">\\n                <Avatar address={address} size={32} resolverOrder={resolverOrder} />  \\n                <Name address={address} resolverOrder={resolverOrder} /> \\n            </button>\\n        )}\\n    </div>\\n</div>\\n\\n```tsx [Code] \\nimport { Name, Avatar, IdentityResolver } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\nimport Address from \\\"viem\\\";\\n\\nconst examples = [\\n    { address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\", resolverOrder: [IdentityResolver.Ens]},\\n    { address: \\\"0x9C87A1065994f156f0B7b87AAa8B3c5F7BD67E02\\\", resolverOrder: [IdentityResolver.Nns, IdentityResolver.Ens]},\\n    { address: \\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\", resolverOrder: [IdentityResolver.Farcaster]},\\n    { address: \\\"0x849151d7D0bF1F34b70d5caD5149D28CC2308bf1\\\", resolverOrder: [IdentityResolver.Base]},\\n    { address: \\\"0xF9E1845cf5E982F4E13F23d75d41Bf795d35Bcf1\\\", resolverOrder: [IdentityResolver.Uni]},\\n    { address: \\\"0x7241DDDec3A6aF367882eAF9651b87E1C7549Dff\\\", resolverOrder: [IdentityResolver.Lens]},\\n    { address: \\\"0x97edb150bb8ca57f22090409e3a20c24afaaa7b0\\\", resolverOrder: [IdentityResolver.World]},\\n]\\n\\n<div className=\\\"flex gap-2 max-w-full flex-wrap\\\">\\n    {examples.map(({address, resolverOrder}) => \\n        <button className=\\\"flex gap-2 items-center p-2 border-2 w-fit rounded-lg border-white/10 hover:bg-white/10 transition-colors\\\">\\n            <Avatar address={address} size={32} resolverOrder={resolverOrder} /> // [!code focus]\\n            <Name address={address} resolverOrder={{resolverOrder}} /> // [!code focus]\\n        </button>\\n    )}\\n</div>\\n```\\n:::\\n\\n{/* TODO: Removed the profile card for now... */}\\n{/* :::code-group \\n\\n<div data-title=\\\"preview\\\">\\n    <div className=\\\"flex gap-2 w-full items-center justify-center\\\">\\n        <Profile address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" />\\n    </div>\\n</div>\\n\\n```tsx [Code] \\nimport { Profile } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Profile address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" />\\n```\\n::: */}\\n\\nSupported resolvers:\\n- [ENS](https://ens.domains/)\\n- [NNS](https://nns.xyz/)\\n- [Farcaster](https://www.farcaster.xyz/)\\n- [Uni Names](https://blog.uniswap.org/introducing-uni-eth-your-unique-web3-username)\\n- [Basenames](https://www.base.org/names)\\n- [Lens](https://www.lens.xyz/)\\n- [World ID](https://world.org/world-id)\\n\\n## Configuration\\n\\nBefore using components or hooks from this kit, set the `IdentityKitConfig` in the `WhiskSdkProvider`. \\n\\n```tsx [providers.tsx] twoslash\\n\\\"use client\\\"; \\nimport { WhiskSdkProvider } from \\\"@paperclip-labs/whisk-sdk\\\";\\nimport { IdentityResolver } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n \\nexport default function Providers({ children }: { children: React.ReactNode }) {\\n  return (\\n    <WhiskSdkProvider\\n        apiKey={\\\"<YOUR_API_KEY>\\\"}\\n        config={{\\n            identity: { // [!code focus]\\n                // Specify the resolver order for sequential resolution. // [!code focus]\\n                // This will be used as defaults if no resolvers are provided in the component or hook. // [!code focus]\\n                resolverOrder: [IdentityResolver.Ens, IdentityResolver.Farcaster, IdentityResolver.Base, IdentityResolver.Nns, IdentityResolver.Uni, IdentityResolver.Lens, IdentityResolver.World],  // [!code focus]\\n\\n                // Optional: Override specific addresses with custom names or avatars.\\n                overrides: {} // [!code focus]\\n            }, // [!code focus]\\n        }}\\n    >\\n        {children}\\n    </WhiskSdkProvider>\\n  );\\n}\\n```\\n\\n| Parameter | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Resolver order to use, will process sequentially until one resolves. Will use a default order if not provided. |\\n| `overrides` | `Record<Address, { name: string; avatar: string }>` | No | Override for a specific addresses with custom names and avatars.  |\\n\\n:::info\\nSee the [getting started steps](/getting-started#wrap-app-in-whisksdkprovider) if you didn't already setup the `WhiskSdkProvider`.\\n:::\\n\\n## Components\\n\\nReact Components are the easiest and recommended way to get up and running with Identity Kit.\\n\\n### Name\\n\\nThe name for an address.\\n\\n:::code-group \\n<div data-title=\\\"Preview\\\">\\n    <Name address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\"  />\\n</div>\\n\\n```tsx [Code] twoslash \\nimport { Name } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Name address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" />\\n```\\n:::\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). |\\n| `className` | `string` | No | Custom CSS class names. |\\n\\nExample customizing with tailwindCSS:\\n:::code-group \\n<div data-title=\\\"Preview\\\">\\n    <Name address=\\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\" className=\\\"text-2xl text-blue-200 \\\" />\\n</div>\\n\\n```tsx [Code] twoslash \\nimport { Name } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Name address=\\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\" className=\\\"text-2xl text-blue-200\\\" />\\n```\\n:::\\n\\n### Avatar\\n\\nThe avatar for an address.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n    <Avatar address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" size={80}  />\\n</div>\\n\\n```tsx [Code] twoslash\\nimport { Avatar } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Avatar address=\\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" size={80} />\\n```\\n:::\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `size` | `number` | Yes | Size in pixels. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). |\\n| `className` | `string` | No | Custom CSS class names. |\\n\\nExample customizing with tailwindCSS:\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n    <Avatar address=\\\"0x849151d7D0bF1F34b70d5caD5149D28CC2308bf1\\\" size={48} className=\\\"border-2 border-red-500 rounded-[4px]\\\" />\\n</div>\\n\\n```tsx [Code] twoslash\\nimport { Avatar } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Avatar address=\\\"0x849151d7D0bF1F34b70d5caD5149D28CC2308bf1\\\" size={48} className=\\\"border-2 border-red-500 rounded-[4px]\\\" />\\n```\\n:::\\n\\n\\n{/* TODO: Removed the profile card for now... */}\\n{/* \\n### Profile\\n\\nThe profile for an address.\\n\\n:::code-group\\n\\n<div data-title=\\\"Preview\\\">\\n    <Profile address=\\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\" />\\n</div>\\n\\n```tsx [Code] twoslash\\nimport { Profile } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\n<Profile address=\\\"0x17cd072cBd45031EFc21Da538c783E0ed3b25DCc\\\" />\\n```\\n:::\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). |\\n| `className` | `string` | No | Custom CSS class names. | */}\\n\\n\\n## Hooks\\n\\nHooks allow you to get the data to build your own custom components if the provided components don't fit your needs.\\n\\nThey use `useQuery` from [Tanstack Query](https://tanstack.com/query/latest) under the hood, and return a `UseQueryResult` object.\\n\\n### useName\\n\\n```tsx twoslash\\nimport { useName } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\nconst { data: name, isLoading } = useName({ address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" });\\n```\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). |\\n\\n### useAvatar\\n\\n```tsx twoslash\\nimport { useAvatar } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\nconst { data: avatar, isLoading } = useAvatar({ address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" });\\n```\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). |\\n\\n{/* TODO: Removed the profile card for now... */}\\n{/* ### useProfile\\n\\n```tsx twoslash\\nimport { useProfile } from \\\"@paperclip-labs/whisk-sdk/identity\\\";\\n\\nconst { data: profile, isLoading } = useProfile({ address: \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\" });\\n```\\n\\n| Props | Type | Required | Description |\\n| --------- | ---- | -------- | ----------- |\\n| `address` | `Address` | Yes | Address to resolve. |\\n| `resolverOrder` | [`IdentityResolver[]`](#identityresolver) | No | Override the default resolvers set in the [`WhiskSdkProvider` config](#configuration). | */}\\n\\n\\n## GraphQL\\n\\nIf you need direct data access you can query the Whisk GraphQL API directly.\\nThis is useful for server component fetching, or for use outside of React.\\n\\n:::info\\nSee the [graphQL docs](/graphql) for how to setup and use the API. \\n:::\\n\\nRelevant schema: \\n```graphql [schema.graphql]\\ntype Query {\\n  identities(addresses: [String!]!, resolverOrder: [IdentityResolver!]): [Identity!]!\\n  identity(address: String!, resolverOrder: [IdentityResolver!]): Identity!\\n}\\n\\ntype Identity {\\n  aggregate: IdentityResolverOutput! # Aggregate based on the resolverOrder\\n  base: IdentityResolverOutput!\\n  ens: IdentityResolverOutput!\\n  farcaster: IdentityResolverOutput!\\n  lens: IdentityResolverOutput!\\n  nns: IdentityResolverOutput!\\n  uni: IdentityResolverOutput!\\n  world: IdentityResolverOutput!\\n}\\n\\ntype IdentityResolverOutput {\\n  avatar: String\\n  bio: String\\n  discord: String\\n  github: String\\n  name: String\\n  telegram: String\\n  website: String\\n  x: String\\n}\\n```\\n\\n## Types\\n\\n### IdentityResolver\\n\\n```tsx \\nexport enum IdentityResolver {\\n  Base = 'base',\\n  Ens = 'ens',\\n  Farcaster = 'farcaster',\\n  Lens = 'lens',\\n  Nns = 'nns',\\n  Uni = 'uni',\\n  World = 'world'\\n}\\n```\\n\",\"document\":[]}],[\"index.5db9b8878f2d0d51f1a498f00a6d0252e31e2d9af84cc1fedd2bfb7f486a69c2\",{\"mdx\":\"---\\nlayout: landing\\n---\\n\\nimport { HomePage } from 'vocs/components'\\n\\n<HomePage.Root>\\n  <HomePage.Logo />\\n  <HomePage.Tagline>Simplify dApp development with modular kits for [Whisk's](https://whisk.so) blockchain data pipelines.</HomePage.Tagline>\\n  <HomePage.InstallPackage name=\\\"@paperclip-labs/whisk-sdk\\\" type=\\\"add\\\" />\\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/getting-started\\\" variant=\\\"accent\\\">Get started</HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/papercliplabs/whisk-sdk\\\">Github</HomePage.Button>\\n  </HomePage.Buttons>\\n</HomePage.Root>\\n\",\"document\":[]}],[\"hash\",\"9765305f\"]]"
