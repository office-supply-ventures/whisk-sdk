import { jsx, jsxs } from "react/jsx-runtime";
import { useMDXComponents } from "vocs/mdx-react";
import "react";
import { L as Link, u as useConfig, a as Logo$1, R as Root$1, b as List, T as Trigger, C as Content } from "../index.server.js";
import clsx from "clsx";
/* empty css                                 */
import "react-dom/server";
import "react-helmet";
import "react-router-dom";
import "react-router-dom/server.js";
import "node:fs";
import "node:path";
import "toml";
import "vite";
import "@vanilla-extract/dynamic";
import "react-intersection-observer";
import "@mdx-js/mdx";
import "@radix-ui/react-icons";
import "@radix-ui/react-dialog";
import "minisearch";
import "@radix-ui/react-label";
import "mark.js";
import "@radix-ui/react-navigation-menu";
import "@tanstack/react-query";
import "graphql-request";
import "@vercel/analytics/react";
import "@radix-ui/react-accordion";
import "@radix-ui/react-popover";
import "@mdx-js/react";
import "@radix-ui/react-tabs";
import "@floating-ui/react";
var button$1 = "vocs_Button_button";
var button_accent = "vocs_Button_button_accent";
function Button$1({ children, className, href, variant }) {
  return jsx(Link, { className: clsx(className, button$1, variant === "accent" && button_accent), href, variant: "styleless", children });
}
var button = "vocs_HomePage_button";
var buttons = "vocs_HomePage_buttons";
var description = "vocs_HomePage_description";
var logo = "vocs_HomePage_logo";
var packageManager = "vocs_HomePage_packageManager";
var root = "vocs_HomePage";
var tabs = "vocs_HomePage_tabs";
var tabsContent = "vocs_HomePage_tabsContent";
var tabsList = "vocs_HomePage_tabsList";
var tagline = "vocs_HomePage_tagline";
var title = "vocs_HomePage_title";
function Root({ children, className }) {
  return jsx("div", { className: clsx(className, root), children });
}
function Logo({ className }) {
  const { logoUrl, title: title$1 } = useConfig();
  return logoUrl ? jsx("div", { className: clsx(className, logo), children: jsx(Logo$1, {}) }) : jsx("h1", { className: clsx(className, title), children: title$1 });
}
function Tagline({ children, className }) {
  return jsx("div", { className: clsx(className, tagline), children });
}
function Description({ children, className }) {
  return jsx("div", { className: clsx(className, description), children });
}
function Buttons({ children, className }) {
  return jsx("div", { className: clsx(className, buttons), children });
}
function Button(props) {
  return jsx(Button$1, { ...props, className: clsx(button, props.className) });
}
function InstallPackage({ name, type = "install" }) {
  return jsxs(Root$1, { className: tabs, defaultValue: "npm", children: [jsxs(List, { className: tabsList, children: [jsx(Trigger, { value: "npm", children: "npm" }), jsx(Trigger, { value: "pnpm", children: "pnpm" }), jsx(Trigger, { value: "yarn", children: "yarn" })] }), jsxs(Content, { className: tabsContent, value: "npm", children: [jsx("span", { className: packageManager, children: "npm" }), " ", type === "init" ? "init" : "install", " ", name] }), jsxs(Content, { className: tabsContent, value: "pnpm", children: [jsx("span", { className: packageManager, children: "pnpm" }), " ", type === "init" ? "create" : "add", " ", name] }), jsxs(Content, { className: tabsContent, value: "yarn", children: [jsx("span", { className: packageManager, children: "yarn" }), " ", type === "init" ? "create" : "add", " ", name] })] });
}
const HomePage = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Button,
  Buttons,
  Description,
  InstallPackage,
  Logo,
  Root,
  Tagline
}, Symbol.toStringTag, { value: "Module" }));
const frontmatter = {
  "layout": "landing"
};
function _createMdxContent(props) {
  const _components = {
    a: "a",
    ...useMDXComponents(),
    ...props.components
  };
  if (!HomePage) _missingMdxReference("HomePage", false);
  if (!Button) _missingMdxReference("HomePage.Button", true);
  if (!Buttons) _missingMdxReference("HomePage.Buttons", true);
  if (!InstallPackage) _missingMdxReference("HomePage.InstallPackage", true);
  if (!Logo) _missingMdxReference("HomePage.Logo", true);
  if (!Root) _missingMdxReference("HomePage.Root", true);
  if (!Tagline) _missingMdxReference("HomePage.Tagline", true);
  return jsxs(Root, {
    children: [jsx(Logo, {}), jsxs(Tagline, {
      children: ["Simplify dApp development with modular kits for ", jsx(_components.a, {
        href: "https://whisk.so",
        children: "Whisk's"
      }), " blockchain data pipelines."]
    }), jsx(InstallPackage, {
      name: "@paperclip-labs/whisk-sdk",
      type: "add"
    }), jsxs(Buttons, {
      children: [jsx(Button, {
        href: "/getting-started",
        variant: "accent",
        children: "Get started"
      }), jsx(Button, {
        href: "https://github.com/papercliplabs/whisk-sdk",
        children: "Github"
      })]
    })]
  });
}
function MDXContent(props = {}) {
  const { wrapper: MDXLayout } = {
    ...useMDXComponents(),
    ...props.components
  };
  return MDXLayout ? jsx(MDXLayout, {
    ...props,
    children: jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
export {
  MDXContent as default,
  frontmatter
};
