"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { QueryClient, QueryClientProvider, useQueryClient } from "@tanstack/react-query";
import { createContext, useContext, useRef } from "react";
import { createWhiskClient } from "./utils/graphql";
const WhiskSdkContext = createContext({
    whiskClient: undefined,
    config: {},
});
export function WhiskSdkProvider({ apiKey, config, children }) {
    const queryClientRef = useRef(null);
    const whiskClient = createWhiskClient(apiKey);
    try {
        const existingQueryClient = useQueryClient();
        queryClientRef.current = existingQueryClient;
    }
    catch {
        if (!queryClientRef.current) {
            // No existing client, so let's make one
            queryClientRef.current = new QueryClient({
                defaultOptions: {
                    queries: {
                        refetchOnMount: false,
                        refetchOnWindowFocus: false,
                        refetchOnReconnect: false,
                        staleTime: 1000 * 60, // 5 minutes
                    },
                },
            });
        }
    }
    return (_jsx(QueryClientProvider, { client: queryClientRef.current, children: _jsx(WhiskSdkContext.Provider, { value: { whiskClient, config }, children: children }) }));
}
export function useWhiskSdkContext() {
    return useContext(WhiskSdkContext);
}
