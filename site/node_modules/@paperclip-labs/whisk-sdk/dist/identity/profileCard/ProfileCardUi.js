"use client";
import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { graphql, useFragment } from "../../generated/gql/whisk";
export const ProfileCard_IdentityFragment = graphql(/* GraphQL */ `
  fragment ProfileCard_IdentityFragment on Identity {
    aggregate {
      ...Name_IdentityResolverOutputFragment
      ...Avatar_IdentityResolverOutputFragment
      bio
      website
      x
      github
      discord
      telegram
    }
    ens {
      name
    }
    farcaster {
      name
    }
    nns {
      name
    }
    base {
      name
    }
    uni {
      name
    }
    lens {
      name
    }
    world {
      name
    }
  }
`);
export function ProfileCardUi({ address, fragment, className, ...props }) {
    const identity = useFragment(ProfileCard_IdentityFragment, fragment);
    return _jsx(_Fragment, { children: "TODO" });
    //   return (
    //     <div className={cn("relative", className)} {...props}>
    //       <AnimatePresence mode="popLayout" initial={false}>
    //         <motion.div
    //           key={name ? "loaded" : "loading"}
    //           initial={{ opacity: 0 }}
    //           animate={{ opacity: 1 }}
    //           exit={{ opacity: 0 }}
    //           transition={{ type: "spring", duration: 0.3, bounce: 0 }}
    //           className={cn("dk-text-ellipsis dk-overflow-hidden dk-whitespace-nowrap")}
    //         >
    //           {name?.aggregate?.name ?? formatAddress({ address })}
    //         </motion.div>
    //       </AnimatePresence>
    //     </div>
    //   );
}
