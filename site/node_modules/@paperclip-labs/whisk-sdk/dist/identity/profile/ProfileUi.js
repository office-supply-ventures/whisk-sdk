"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { graphql, useFragment } from "../../generated/gql/whisk";
import { AvatarUi } from "../avatar";
import { NameUi } from "../name";
import { CONFIG } from "../../config";
import { formatAddress } from "../../format";
import { cn } from "../../ui";
import { Skeleton } from "../../ui/skeleton";
const SOCIALS_IMAGE_BASE_URL = CONFIG.whiskServerUrl + "/static/img/social";
export const Profile_IdentityFragment = graphql(/* GraphQL */ `
  fragment Profile_IdentityFragment on Identity {
    aggregate {
      name
      avatar
      bio
      website
      x
      github
      discord
      telegram
    }
    ens {
      name
    }
    farcaster {
      name
    }
    nns {
      name
    }
    base {
      name
    }
    uni {
      name
    }
    lens {
      name
    }
    world {
      name
    }
  }
`);
export function ProfileUi({ address, fragment, className, ...props }) {
    const identity = useFragment(Profile_IdentityFragment, fragment);
    return (_jsxs("div", { className: cn("flex flex-col rounded-2xl text-foreground overflow-hidden border drop-shadow bg-background w-full max-w-[360px]", className), ...props, children: [_jsxs("div", { className: "flex flex-col items-center justify-center p-6 bg-muted gap-3 text-center", children: [_jsx(AvatarUi, { address: address, avatar: identity?.aggregate.avatar, size: 74 }), _jsxs("div", { children: [_jsx(NameUi, { address: address, name: identity?.aggregate.name, className: "text-lg font-bold" }), _jsx("span", { className: "text-sm text-muted-foreground font-semibold", children: formatAddress({ address }) })] }), identity ? (_jsxs(_Fragment, { children: [_jsx("span", { children: identity.aggregate.bio }), identity.aggregate.website && (_jsx("a", { href: identity.aggregate.website, target: "_blank", className: "rounded-full px-3 py-2 bg-black/5 text-sm text-foreground hover:bg-black/10 hover:text-foreground transition-colors", children: identity.aggregate.website }))] })) : (_jsx(Skeleton, { className: "w-full h-[70px]" }))] }), _jsxs("div", { className: "px-[18px] py-6 flex flex-col items-start gap-2", children: [_jsx("div", { className: "text-sm font-semibold text-muted-foreground px-1.5", children: "Connected accounts" }), _jsx("div", { className: "flex flex-col w-full", children: _jsx(SocialItems, { fragment: fragment }) })] })] }));
}
function SocialItems({ fragment }) {
    const identity = useFragment(Profile_IdentityFragment, fragment);
    if (!identity)
        return Array(3)
            .fill(0)
            .map((_, i) => _jsx(Skeleton, { className: "w-full h-[36px] m-1" }, i));
    const socialItems = [
        { logoPath: "/farcaster.png", baseUrl: "https://warpcast.com", username: identity.farcaster.name },
        { logoPath: "/lens.png", baseUrl: "https://hey.xyz/u", username: identity.lens.name },
        { logoPath: "/x.png", baseUrl: "https://x.com", username: identity.aggregate.x },
        { logoPath: "/base.png", baseUrl: "https://www.base.org/name", username: identity.base.name },
        { logoPath: "/uninames.png", baseUrl: undefined, username: identity.uni.name },
        { logoPath: "/ens.png", baseUrl: "https://app.ens.domains", username: identity.ens.name },
        { logoPath: "/discord.png", baseUrl: undefined, username: identity.aggregate.discord },
        { logoPath: "/telegram.png", baseUrl: undefined, username: identity.aggregate.telegram },
        { logoPath: "/github.png", baseUrl: "https://github.com", username: identity.aggregate.github },
        { logoPath: "/nns.png", baseUrl: "https://nns.xyz/domains", username: identity.nns.name },
        { logoPath: "/world-id.png", baseUrl: undefined, username: identity.world.name },
    ];
    return (_jsx(_Fragment, { children: socialItems
            .filter((item) => item.username)
            .map((item, i) => (_jsxs("a", { href: item.baseUrl ? `${item.baseUrl}/${item.username}` : undefined, target: "_blank", className: "flex gap-2 items-center text-foreground hover:text-foreground transition-colors hover:bg-black/10 rounded-lg px-1 py-1 w-full font-bold", children: [_jsx("img", { src: `${SOCIALS_IMAGE_BASE_URL}/${item.logoPath}`, width: 28, height: 28, className: "rounded-[6px] border shadow-inner", alt: item.logoPath.split(".")[0] }), _jsx("span", { children: item.username })] }, i))) }));
}
