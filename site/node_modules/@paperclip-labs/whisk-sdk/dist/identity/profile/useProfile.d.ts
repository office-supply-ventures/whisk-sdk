import { Address } from "viem";
import { IdentityResolver } from "../types";
export declare function useProfileQuery({ address, resolverOrder }: {
    address: Address;
    resolverOrder?: IdentityResolver[];
}): import("@tanstack/react-query").UseQueryResult<({
    __typename?: "Identity";
} & {
    ' $fragmentRefs'?: {
        "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
    };
}) | undefined, Error>;
export declare function useProfile({ address, resolverOrder }: {
    address: Address;
    resolverOrder?: IdentityResolver[];
}): {
    data: import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment | undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined>;
} | {
    data: import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment | undefined;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined>;
} | {
    data: import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment | undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined>;
} | {
    data: import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment | undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined>;
} | {
    data: import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment | undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    promise: Promise<({
        __typename?: "Identity";
    } & {
        ' $fragmentRefs'?: {
            "Profile_IdentityFragmentFragment": import("../../generated/gql/whisk/graphql").Profile_IdentityFragmentFragment;
        };
    }) | undefined>;
};
