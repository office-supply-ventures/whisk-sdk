import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Avatar_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        avatar\n      }\n    }\n  }\n": typeof types.Avatar_IdentityQueryDocument;
    "\n  query Name_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        name\n      }\n    }\n  }\n": typeof types.Name_IdentityQueryDocument;
    "\n  fragment Profile_IdentityFragment on Identity {\n    aggregate {\n      name\n      avatar\n      bio\n      website\n      x\n      github\n      discord\n      telegram\n    }\n    ens {\n      name\n    }\n    farcaster {\n      name\n    }\n    nns {\n      name\n    }\n    base {\n      name\n    }\n    uni {\n      name\n    }\n    lens {\n      name\n    }\n    world {\n      name\n    }\n  }\n": typeof types.Profile_IdentityFragmentFragmentDoc;
    "\n  query Profile_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      ...Profile_IdentityFragment\n    }\n  }\n": typeof types.Profile_IdentityQueryDocument;
};
declare const documents: Documents;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export declare function graphql(source: string): unknown;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: "\n  query Avatar_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        avatar\n      }\n    }\n  }\n"): (typeof documents)["\n  query Avatar_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        avatar\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: "\n  query Name_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query Name_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      aggregate {\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: "\n  fragment Profile_IdentityFragment on Identity {\n    aggregate {\n      name\n      avatar\n      bio\n      website\n      x\n      github\n      discord\n      telegram\n    }\n    ens {\n      name\n    }\n    farcaster {\n      name\n    }\n    nns {\n      name\n    }\n    base {\n      name\n    }\n    uni {\n      name\n    }\n    lens {\n      name\n    }\n    world {\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment Profile_IdentityFragment on Identity {\n    aggregate {\n      name\n      avatar\n      bio\n      website\n      x\n      github\n      discord\n      telegram\n    }\n    ens {\n      name\n    }\n    farcaster {\n      name\n    }\n    nns {\n      name\n    }\n    base {\n      name\n    }\n    uni {\n      name\n    }\n    lens {\n      name\n    }\n    world {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export declare function graphql(source: "\n  query Profile_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      ...Profile_IdentityFragment\n    }\n  }\n"): (typeof documents)["\n  query Profile_IdentityQuery($address: String!, $resolverOrder: [IdentityResolverInput!]) {\n    identity(address: $address, resolverOrder: $resolverOrder) {\n      ...Profile_IdentityFragment\n    }\n  }\n"];
export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
export {};
