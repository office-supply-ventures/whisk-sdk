schema {
  query: Query
}

scalar Any

type Apy {
  base: Float!
  rewards: [RewardApy!]!
  total: Float!
}

type Chain {
  icon: String!
  id: Int!
  name: String!
  nativeToken: Token
  wrappedNativeToken: Token
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

scalar File

type Identity {
  aggregate: IdentityResolverOutput!
  base: IdentityResolverOutput!
  ens: IdentityResolverOutput!
  farcaster: IdentityResolverOutput!
  lens: IdentityResolverOutput!
  nns: IdentityResolverOutput!
  uni: IdentityResolverOutput!
  world: IdentityResolverOutput!
}

enum IdentityResolverInput {
  base
  ens
  farcaster
  lens
  nns
  uni
  world
}

type IdentityResolverOutput {
  avatar: String
  bio: String
  discord: String
  github: String
  name: String
  telegram: String
  website: String
  x: String
}

input ItemsInput {
  address: Any!
  chainId: Number!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Custom scalar that handles both integers and floats"""
scalar Number

type Protocol {
  icon: String!
  name: String!
}

type Query {
  chain(id: Int!): Chain!
  chains: [Chain!]!
  identities(addresses: [String!]!, resolverOrder: [IdentityResolverInput!]): [Identity!]!
  identity(address: String!, resolverOrder: [IdentityResolverInput!]): Identity!
  token(address: Any!, chainId: Number!): Token
  tokens(items: [ItemsInput!]!): [Token]!
  vault(address: String!, chainId: Int!, protocol: VaultProtocolInput!): Vault
  vaults(vaultItems: [VaultItemsInput!]!): [Vault]!
}

type RewardApy {
  apy: Float!
  token: Token
}

type Token {
  address: String!
  chain: Chain!
  decimals: Number!
  icon: String
  name: String!
  priceUsd: Number
  symbol: String!
}

type Vault {
  address: String!
  chain: Chain!
  description: String
  name: String!
  protocol: Protocol!
  supplyApy: Apy!
  totalSupplied: Float!
  totalSuppliedUsd: Float
  type: VaultType!
  underlyingAsset: Token
  url: String!
}

input VaultItemsInput {
  address: String!
  chainId: Int!
  protocol: VaultProtocolInput!
}

enum VaultProtocolInput {
  enzyme
  euler_v2
  mellow
  morpho
}

enum VaultType {
  lending
  staking
}

"""Represents NULL values"""
scalar Void